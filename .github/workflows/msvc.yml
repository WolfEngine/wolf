name: windows-x64-cpp-code-analysis

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "41 16 * * 1"

env:
  # Path to the CMake build directory.
  build: "${{ github.workspace }}/build"
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/.cache

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Analyze
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg integrate install

      - name: Add vcpkg to environment variable
        run: |
          echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV

      - name: Get SW
        uses: egorpugin/sw-action@master

      - name: SW setup and add to PATH
        run: |
          ./sw setup
          echo "D:\a\WolfEngine\wolf" >> $env:GITHUB_PATH

      - name: Setup OpenCppCoverage and add to PATH
        id: setup_opencppcoverage
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Configure CMake via Debug mode
        run: cmake -S . -B ${{ env.build }}/windows-x64-msvc-static --preset=windows-x64-msvc-static -DCMAKE_BUILD_TYPE=Debug
         
      - name: Build CMake via Debug mode
        run: cmake --build ${{ env.build }}/windows-x64-msvc-static --config Debug

      - name: Run MSVC Code Analysis on Debug mode
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset
          ignoredTargetPaths: ${{ env.build }}/_deps/boost_chrono-src;${{ env.build }}/_deps/boost_context-src;${{ env.build }}/_deps/boost_coroutine-src;${{ env.build }}/_deps/boost_date_time-src;${{ env.build }}/_deps/boost_exception-src;${{ env.build }}/_deps/fmt-src;${{ env.build }}/_deps/boost_container-src;${{ env.build }}/_deps/opencv-src;${{ env.build }}/_deps/rapidjson-src;${{ env.build }}/_deps/tesseract-src

      - name: Generate Codecov Report
        id: generate_test_report
        shell: cmd
        run: OpenCppCoverage.exe --continue_after_cpp_exception --export_type cobertura:WolfCov.xml --sources %CD% --excluded_sources %CD%\build\_deps -- %CD%\build\wolf\Debug\wolf_tests.exe
      - name: Upload Report to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./WolfCov.xml
          fail_ci_if_error: true
          functionalities: fix

      # Upload SARIF file to GitHub Code Scanning Alerts
      #- name: Upload SARIF to GitHub
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}

      - name: Build CMake via Release mode
        run: cmake --build ${{ env.build }}/windows-x64-msvc-static --config Release

      - name: Build CMake via RelWithDebInfo mode
        run: cmake --build ${{ env.build }}/windows-x64-msvc-static --config RelWithDebInfo

      - name: Build CMake via MinSizeRel mode
        run: cmake --build ${{ env.build }}/windows-x64-msvc-static --config MinSizeRel
          
